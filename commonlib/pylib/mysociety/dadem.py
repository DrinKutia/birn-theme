# THIS FILE WAS AUTOMATICALLY GENERATED BY ./rabxresttopy.pl, DO NOT EDIT DIRECTLY
# 
# dadem.py:
# Client interface for DaDem.
#
# Copyright (c) 2009 UK Citizens Online Democracy. All rights reserved.
# WWW: http://www.mysociety.org
#
# $Id: dadem.py,v 1.1 2009-11-30 13:11:03 matthew Exp $
#

import mysociety.config
import mysociety.rabx

def do_call_rest_rabx(*params):
    base_url = mysociety.config.get("DADEM_URL")
    return mysociety.rabx.call_rest_rabx(base_url, params)

UNKNOWN_AREA = 3001        #    Area ID refers to a non-existent area. 
REP_NOT_FOUND = 3002        #    Representative ID refers to a non-existent representative. 
AREA_WITHOUT_REPS = 3003        #    Area ID refers to an area for which no representatives are returned. 
PERSON_NOT_FOUND = 3004        #    Person ID refers to a non-existent person. 
CONTACT_FAX = 101        #    Means of contacting representative is fax. 
CONTACT_EMAIL = 102        #    Means of contacting representative is email. 

def get_representatives(id_or_array, all = None):
    '''* dadem_get_representatives ID_or_ARRAY [ALL]

  Given the ID of an area (or an ARRAY of IDs of several areas), return a
  list of the representatives returned by that area, or, for an array, a
  hash mapping area ID to a list of representatives for each; or, on
  failure, an error code. The default is to return only current
  reprenatives. If ALL has value 1, then even deleted representatives are
  returned.
    '''
    result = do_call_rest_rabx('DaDem.get_representatives', id_or_array, all)
    return result

def get_area_status(area_id):
    '''* dadem_get_area_status AREA_ID

  Get the electoral status of area AREA_ID. Can be any of these: none - no
  special status pending_election - representative data invalid due to
  forthcoming election recent_election - representative data invalid
  because we haven't updated since election
    '''
    result = do_call_rest_rabx('DaDem.get_area_status', area_id)
    return result

def get_area_statuses():
    '''* dadem_get_area_statuses

  Get the current electoral statuses. Can be any of these: none - no
  special status pending_election - representative data invalid due to
  forthcoming election recent_election - representative data invalid
  because we haven't updated since election
    '''
    result = do_call_rest_rabx('DaDem.get_area_statuses', )
    return result

def search_representatives(query):
    '''* dadem_search_representatives QUERY

  Given search string, returns list of the representatives whose names,
  party, email or fax contain the string (case insensitive). Returns the id
  even if the string only appeared in the history of edited
  representatives, or in deleted representatives.
    '''
    result = do_call_rest_rabx('DaDem.search_representatives', query)
    return result

def get_user_corrections():
    '''* dadem_get_user_corrections

  Returns list of user submitted corrections to democratic data. Each entry
  in the list is a hash of data about the user submitted correction.
    '''
    result = do_call_rest_rabx('DaDem.get_user_corrections', )
    return result

def get_bad_contacts():
    '''* dadem_get_bad_contacts

  Returns list of representatives whose contact details are bad. That is,
  listed as 'unknown', listed as 'fax' or 'email' without appropriate
  details being present, or listed as 'either'. (There's a new policy to
  discourages 'eithers' at all, as they are confusing).

  TODO: Check 'via' type as well somehow.
    '''
    result = do_call_rest_rabx('DaDem.get_bad_contacts', )
    return result

def get_representative_info(id):
    '''* dadem_get_representative_info ID

  Given the ID of a representative, return a reference to a hash of
  information about that representative, including:

  * type

    Three-letter OS-style code for the type of voting area (for instance,
    CED or ward) for which the representative is returned.

  * name

    The representative's name.

  * method

    How to contact the representative.

  * email

    The representative's email address (only specified if method is
    'email').

  * fax

    The representative's fax number (only specified if method is 'fax').

  or, on failure, an error code.
    '''
    result = do_call_rest_rabx('DaDem.get_representative_info', id)
    return result

def get_representatives_info(array):
    '''* dadem_get_representatives_info ARRAY

  Return a reference to a hash of information on all of the representative
  IDs given in ARRAY.
    '''
    result = do_call_rest_rabx('DaDem.get_representatives_info', array)
    return result

def get_same_person(person_id):
    '''* dadem_get_same_person PERSON_ID

  Returns an array of representative identifiers which are known to be the
  same person as PERSON_ID. Currently, this information only covers MPs.
    '''
    result = do_call_rest_rabx('DaDem.get_same_person', person_id)
    return result

def store_user_correction(va_id, rep_id, change, name, party, notes, email):
    '''* dadem_store_user_correction VA_ID REP_ID CHANGE NAME PARTY NOTES EMAIL

  Records a correction to representative data made by a user on the
  website. CHANGE is either "add", "delete" or "modify". NAME and PARTY are
  new values. NOTES and EMAIL are fields the user can put extra info in.
    '''
    result = do_call_rest_rabx('DaDem.store_user_correction', va_id, rep_id, change, name, party, notes, email)
    return result

def admin_get_stats():
    '''* dadem_admin_get_stats

  Return a hash of information about the number of representatives in the
  database. The elements of the hash are,

  * representative_count

    Number of representatives in total (including deleted, out of
    generation)

  * area_count

    Number of areas for which representative information is stored.
    '''
    result = do_call_rest_rabx('DaDem.admin_get_stats', )
    return result

def get_representative_history(id):
    '''* dadem_get_representative_history ID

  Given the ID of a representative, return an array of hashes of
  information about changes to that representative's contact info.
    '''
    result = do_call_rest_rabx('DaDem.get_representative_history', id)
    return result

def get_representatives_history(id):
    '''* dadem_get_representatives_history ID

  Given an array of ids of representatives, returns a hash from
  representative ids to an array of history of changes to that
  representative's contact info.
    '''
    result = do_call_rest_rabx('DaDem.get_representatives_history', id)
    return result

def admin_edit_representative(id, details, editor, note):
    '''* dadem_admin_edit_representative ID DETAILS EDITOR NOTE

  Alters data for a representative, updating the override table
  representative_edited. ID contains the representative id, or undefined to
  make a new one (in which case DETAILS needs to contain area_id and
  area_type). DETAILS is a hash from name, party, method, email and fax to
  their new values, or DETAILS is not defined to delete the representative.
  Every value has to be present - or else values are reset to their initial
  ones when import first happened. Any modification counts as an
  undeletion. EDITOR is the name of the person who edited the data. NOTE is
  any explanation of why / where from. Returns ID, or if ID was undefined
  the new id.
    '''
    result = do_call_rest_rabx('DaDem.admin_edit_representative', id, details, editor, note)
    return result

def admin_done_user_correction(id):
    '''* dadem_admin_done_user_correction ID

  Marks user correction ID as having been dealt with.
    '''
    result = do_call_rest_rabx('DaDem.admin_done_user_correction', id)
    return result

def admin_mark_failing_contact(id, method, x, editor, comment):
    '''* dadem_admin_mark_failing_contact ID METHOD X EDITOR COMMENT

  Report that a delivery to representative ID by METHOD ('email' or 'fax')
  to the number or address X failed. Marks the representative as having
  unknown contact details if X is still the current contact method for that
  representative. EDITOR is the name of the entity making the correction
  (e.g. 'fyr-queue'), COMMENT is an extra comment to add to the change log
  of the representatives details.
    '''
    result = do_call_rest_rabx('DaDem.admin_mark_failing_contact', id, method, x, editor, comment)
    return result

def admin_set_area_status(area_id, new_status):
    '''* dadem_admin_set_area_status AREA_ID NEW_STATUS

  Set the electoral status of an area given by AREA_ID. NEW_STATUS can have
  any of the values described for get_area_status.
    '''
    result = do_call_rest_rabx('DaDem.admin_set_area_status', area_id, new_status)
    return result

def admin_get_raw_council_status():
    '''* dadem_admin_get_raw_council_status

  Returns how many councils are not in the made-live state.
    '''
    result = do_call_rest_rabx('DaDem.admin_get_raw_council_status', )
    return result

def admin_get_diligency_council(time):
    '''* dadem_admin_get_diligency_council TIME

  Returns how many edits each administrator has made to the raw council
  data since unix time TIME. Data is returned as an array of pairs of
  count, name with largest counts first.
    '''
    result = do_call_rest_rabx('DaDem.admin_get_diligency_council', time)
    return result

def admin_get_diligency_reps(time):
    '''* dadem_admin_get_diligency_reps TIME

  Returns how many edits each administrator has made to representatives
  since unix time TIME. Data is returned as an array of pairs of count,
  name with largest counts first.
    '''
    result = do_call_rest_rabx('DaDem.admin_get_diligency_reps', time)
    return result

